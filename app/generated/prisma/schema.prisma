// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  favorites      UserFavorite[]
  readingHistory ReadingHistory[]
}

model Manga {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  coverImage  String
  status      Status         @default(ONGOING)
  type        MangaType      @default(MANGA)
  genres      String[]
  author      String
  artist      String?
  chapters    Chapter[]
  favorites   UserFavorite[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Chapter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  number    Float
  title     String?
  mangaId   String   @db.ObjectId
  manga     Manga    @relation(fields: [mangaId], references: [id])
  pages     Page[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  number    Int
  imageUrl  String
  chapterId String   @db.ObjectId
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReadingHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  mangaId   String   @db.ObjectId
  chapterId String   @db.ObjectId
  page      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  manga     Manga    @relation(fields: [mangaId], references: [id])
  mangaId   String   @db.ObjectId
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ONGOING
  COMPLETED
  DROPPED
  HIATUS
}

enum MangaType {
  MANGA
  MANHWA
  MANHUA
  NOVEL
}
